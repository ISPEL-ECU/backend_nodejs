{"version":3,"sources":["components/Course/Domain.js","components/Course/Domains.js","components/Course/Area.js","components/Course/Areas.js","components/Course/Topic.js","components/Course/Topics.js","components/UI/Card.js","components/Course/Display.js","components/Course/topicTree.js","components/Course/TopicForOverview.js","components/Course/CourseOverwiew.js","components/Course/Tree.js","components/Course/CourseName.js","components/Course/Course.js","App.js","index.js"],"names":["domain","props","react_default","a","createElement","value","id","name","Domains","React","memo","_useState","useState","_useState2","Object","slicedToArray","domains","setDomains","_useState3","_useState4","showDomains","setShowDomains","useEffect","axios","get","then","data","onDomainChange","domainId","onChangeDomain","domainsToDisplay","map","Domain","key","FormGroup","Form","Check","type","label","onChange","event","target","checked","showSearch","htmlFor","hidden","Control","as","style","display","area","Areas","areas","setAreas","console","log","selectedDomain","params","length","onAreaChange","areaId","onChangeArea","areasToDisplay","Area","className","topic","Topics","topics","setTopics","selectedTopics","setSelectedTopics","searchValueRef","useRef","inputRef","selectedArea","current","focus","searchHandler","tops","Search","InputGroup","size","Prepend","Text","FormControl","aria-label","ref","aria-describedby","topicsToDisplay","Topic","Array","from","selectedOptions","option","multiple","Button","variant","onClick","onSelectedTopics","preventDefault","Card","children","Display","setTopic","selectedTopic","height","components_UI_Card","title","src","frameBorder","Tree","_this","classCallCheck","this","_super","call","handleTreeOnChange","treeData","setState","setTreeData","lenght","setButtonDisabled","state","treeFunction","onSelectedTopic","index_esm","getNodeKey","_ref","node","Component","TopicForOverview","nodeClick","teaser","CourseOverview","Course_TopicForOverview","courseName","nodes","links","edges","lib","config","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","freezeAllDragEvents","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","staticGraphWithDragAndDrop","width","d3","alphaTarget","gravity","linkLength","linkStrength","disableLinkForce","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","strokeColor","strokeWidth","svg","symbolType","link","semanticStrokeWidth","markerHeight","markerWidth","strokeDasharray","strokeDashoffset","strokeLinecap","onClickNode","nodeId","Name","NameHandler","useCallback","onNameHandler","CourseBuilder","setSelectedDomain","setSelectedArea","_useState5","_useState6","_useState7","_useState8","setSelectedTopic","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","buttonDisabled","_useState15","_useState16","processedTopics","setProcessedTopics","_useState17","_useState18","processedEdges","setProcessedEdges","_useState19","_useState20","topicsForCourse","setTopicsForCourse","_useState21","_useState22","setShowSearch","_useState23","_useState24","setCourseName","changeAreaHandler","buildTree","i","push","subtitle","url","contentHtml","treeNodeClickHandler","Container","fluid","Row","Col","sm","esm_Card","CourseName","Course_Domains","Course_Areas","Course_Topics","concat","extractTopicsHandler","topicTree_Tree","onTopicExtracted","topicId","processChildren","currentNode","rootPosition","source","processTreeData","disabled","CourseOverwiew","Course_Tree","Course_Display","App","Course","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cca21c0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst domain = (props) =>(\r\n    <option value={props.id}>\r\n        {props.name}\r\n    </option>\r\n\r\n);\r\n\r\nexport default domain;","import React, { useEffect, useState } from 'react';\n\nimport Domain from './Domain'\n\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\n\nimport axios from 'axios';\n\nconst Domains = React.memo(props => {\n  const [domains, setDomains] = useState([]);\n  const [showDomains, setShowDomains] = useState(true);\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/react/get-domains')\n      .then(domains => {\n\n        setDomains(domains.data);\n        onDomainChange(domains.data[0].id);\n\n      });\n  }, []);\n  const onDomainChange = domainId => {\n    props.onChangeDomain(domainId);\n\n    //event.preventDefault();\n    // ...\n  };\n\n  const handleSearchCheck = (event) => {\n    if (event.target.checked) {\n      props.showSearch(true);\n      setShowDomains(false);\n    } else {\n      props.showSearch(false);\n      setShowDomains(true);\n    }\n  }\n\n  const domainsToDisplay = domains.map(domain => {\n\n    return <Domain id={domain.id} name={domain.name} key={domain.id} />\n  });\n\n  return (\n    <FormGroup>\n      <Form.Check\n        type=\"checkbox\"\n        label=\"Advanced Search\"\n        id=\"advancedSearch\"\n        onChange={handleSearchCheck}\n      />\n      <label htmlFor=\"domainSelect\" hidden={!showDomains}>Select Domain</label>\n      <Form.Control as=\"select\" hidden={!showDomains} id=\"domainSelect\" style={{ display: \"inline\" }} onChange={(event) => onDomainChange(event.target.value)}>\n        {domainsToDisplay}\n      </Form.Control>\n    </FormGroup>\n\n\n  );\n});\n\nexport default Domains;\n","import React from 'react';\r\n\r\nconst area = (props) =>(\r\n    <option value={props.id}>\r\n        {props.name}\r\n    </option>\r\n\r\n);\r\n\r\nexport default area;","import React, { useEffect, useState } from 'react';\n\nimport './IngredientList.css';\nimport Area from './Area';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\n\n\nconst Areas = (props) => {\n\n  const [areas, setAreas] = useState([]);\n \n\n  useEffect(() => {\n    console.log(props.selectedDomain);\n    axios.get('http://localhost:3000/react/get-areas', { params: { domainId: ((props.selectedDomain && props.selectedDomain !== '') ? props.selectedDomain : '-1') } })\n      .then(areas => {\n\n        setAreas(areas.data);\n        if (areas.data.length > 0)\n          onAreaChange(areas.data[0].id);\n        // console.log(domains);\n      });\n  }, [props.selectedDomain]);\n\n\n\n  const onAreaChange = areaId => {\n    props.onChangeArea(areaId);\n    //event.preventDefault();\n    // ...\n  };\n\n\n  const areasToDisplay = areas.map(area => {\n\n    return <Area id={area.id} name={area.name} key={area.id} />\n  });\n\n  return (\n    <section className=\"ingredient-list\">\n\n\n      <FormGroup>\n        <label htmlFor=\"areaSelect\">Select Area</label>\n        <Form.Control as=\"select\" id=\"areaSelect\" style={{ display: \"inline\" }}  onChange={(event) => onAreaChange(event.target.value)}>\n          {areasToDisplay}\n        </Form.Control>\n\n      </FormGroup>\n\n\n    </section>\n  );\n};\n\nexport default Areas;\n","import React from 'react';\r\n\r\nconst topic = (props) =>(\r\n    <option value={props.id}>\r\n        {props.name}\r\n    </option>\r\n\r\n);\r\n\r\nexport default topic;","import React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\n\n//bootstrap components\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\n\nimport Topic from './Topic'\n\n\n\n\nconst Topics = React.memo(props => {\n  const [topics, setTopics] = useState([]);\n  const [selectedTopics, setSelectedTopics] = useState([]);\n  const searchValueRef = useRef('');\n  const inputRef = useRef();\n  useEffect(() => {\n    \n    axios.get('http://localhost:3000/react/get-topics', \n    { params:\n       { areaId: (props.selectedArea && props.selectedArea !== '') ? props.selectedArea : \"-1\",\n       } })\n      .then(topics => {\n        setTopics(topics.data);\n      });\n  }, [props.selectedArea]);\n\n  useEffect(() =>{\n    if (props.showSearch){\n    inputRef.current.focus();\n    }\n  }, [props.showSearch,topics]);\n\n  const searchHandler = (event) =>{\n    searchValueRef.current =  event.target.value;\n    axios.get('http://localhost:3000/react/get-topics-search', \n    { params:\n       { name:searchValueRef.current,\n       } })\n      .then(tops => {\n        setTopics(tops.data);\n      });\n  }\n\n  const Search = (() => {\n\n    if (props.showSearch){\n\n    return (\n      <FormGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">Search:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl aria-label=\"Small\" onChange={searchHandler} value={searchValueRef.current} ref={inputRef} aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n      </FormGroup>\n\n\n    );\n    }\n    else {\n      searchValueRef.current = '';\n      return null}\n\n  })\n\n  const topicsToDisplay = topics.map(topic => {\n    return <Topic id={topic.id} name={topic.name} key={topic.id} />\n  });\n\n  const selectTopics = event => {\n    props.onSelectedTopics(selectedTopics);\n    event.preventDefault();\n  };\n\n  const onChangeHandler = event => {\n    setSelectedTopics(Array.from(event.target.selectedOptions, option => option.value));\n  }\n  return (\n    <Form  >\n      <Search/>\n      <Form.Control onChange={onChangeHandler} as=\"select\" size='5' multiple>\n        {topicsToDisplay}\n      </Form.Control>\n      < Button variant=\"primary\" onClick={selectTopics} >\n        Submit\n      </ Button>\n    </Form>\n  );\n});\n\nexport default Topics;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport Card from '../UI/Card';\r\n\r\n\r\nimport './IngredientForm.css';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Display = React.memo(props => {\r\n    const [topic, setTopic] = useState('');\r\n\r\n    useEffect(() => {\r\n        console.log('ST '+props.selectedTopic);\r\n        axios.get('http://localhost:3000/react/get-content', { params: { id: ((props.selectedTopic.length!=='')?props.selectedTopic:'-1') } })\r\n            .then(topic => {\r\n                console.log('selected topic content');\r\n                console.log(topic);\r\n                setTopic(topic.data);\r\n\r\n            });\r\n    }, [props.selectedTopic]);\r\n    // const onTopicChange = domainId => {\r\n    //   props.onChangeDomain(domainId);\r\n    //   console.log('domainId='+domainId);\r\n    //   //event.preventDefault();\r\n    //   // ...\r\n    // };\r\n\r\n   \r\n   \r\n\r\n\r\n\r\n    return (\r\n        <section style={{height:100+'%'}} >\r\n            <Card style={{height:100+'%'}}>\r\n               \r\n                \r\n            <div  style={{height:100+'%'}}>\r\n                            <iframe title=\"Preview\"  src={((topic!=='')?('http://localhost:3000/author/topic/'+topic):'http://localhost:3000/author/topic/rmdhtml/preview.html')} id=\"frame\"   frameBorder=\"0\"></iframe>\r\n                        </div>\r\n                 \r\n               \r\n                \r\n                            \r\n                           \r\n            </Card>\r\n        </section>\r\n    );\r\n});\r\n\r\nexport default Display;\r\n","import React, { Component } from 'react';\r\n\r\nimport SortableTree from 'react-sortable-tree';\r\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\n\r\nexport default class Tree extends Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n      treeData: props.treeData,\r\n      treeFunction: props.treeFunction\r\n    };\r\n  }\r\n\r\n  handleTreeOnChange = treeData => {\r\n    this.setState({ treeData });\r\n    this.props.setTreeData(treeData);\r\n    if (treeData.lenght < 1) {\r\n      this.props.setButtonDisabled(true);\r\n    } else {\r\n      if (treeData.length === 1 && treeData[0].title === \"empty\") {\r\n        this.props.setButtonDisabled(true);\r\n      } else {\r\n\r\n        this.props.setButtonDisabled(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n\r\n    this.setState({ treeData: this.props.treeData });\r\n    this.props.setTreeData(this.props.treeData);\r\n    if (this.props.treeData.lenght < 1) {\r\n      this.props.setButtonDisabled(true);\r\n    } else {\r\n      if (this.props.treeData.length === 1 && this.props.treeData[0].title === \"empty\") {\r\n        this.props.setButtonDisabled(true);\r\n      } else {\r\n\r\n        this.props.setButtonDisabled(false);\r\n      }\r\n     \r\n    }\r\n\r\n  }\r\n\r\n  lineClick(id, treeData) {\r\n    console.log(id);\r\n\r\n    this.props.onSelectedTopic(id);\r\n  }\r\n\r\n  saveCourseHandler(event) {\r\n    //console.log(topics);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      \r\n        <FormGroup style={{ height: 400 }}>\r\n          <SortableTree\r\n            treeData={this.state.treeData}\r\n            onChange={this.handleTreeOnChange}\r\n            getNodeKey={({ node }) => node.id}\r\n            // generateNodeProps={rowInfo => ({\r\n            //   onClick: () => this.lineClick(rowInfo.node.id)\r\n            // })}\r\n          />\r\n\r\n        </FormGroup>\r\n      \r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nconst TopicForOverview = (props) =>(\r\n    <tr >\r\n        <td>\r\n            <div key={props.topic.id} onClick={()=>props.nodeClick(props.topic.id)}>\r\n                <h3>{props.topic.name}</h3>\r\n                <p>\r\n                    {props.topic.teaser}\r\n                </p>\r\n            </div>\r\n        </td>\r\n    </tr>\r\n\r\n);\r\n\r\nexport default TopicForOverview;","import React from 'react';\r\nimport TopicForOverview from './TopicForOverview';\r\n\r\nconst CourseOverview = React.memo(props => {\r\n\r\n\r\n    console.log(\"courseoverview\");\r\n    console.log(props.topics);\r\n\r\n    const topicsToDisplay = props.topics.map(topic => {\r\n\r\n        console.log(\"topic\");\r\n        console.log(topic);\r\n        return <TopicForOverview key={topic.id} topic={topic} nodeClick={props.nodeClick} />;//<Topic topic={topic} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h2>{props.courseName}</h2>\r\n            <hr></hr>\r\n            <table>\r\n                <tbody>\r\n                    {topicsToDisplay}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default CourseOverview;\r\n","import React from 'react';\r\nimport { Graph } from \"react-d3-graph\";\r\n\r\n\r\nconst Tree = React.memo(props => {\r\n  \r\n  let nodes = props.nodes;\r\n  let edges = props.edges;\r\n\r\n  const data = {\r\n    nodes: nodes,\r\n    links: edges,\r\n   \r\n  };\r\n\r\n\r\n  // define links as edges, e.g. if you have 5 topics\r\n  // then these topics index are 0, 1, 2, 3, 4\r\n\r\n  // the graph configuration, just override the ones you need\r\n  const myConfig = {\r\n    automaticRearrangeAfterDropNode: false,\r\n    collapsible: false,\r\n    directed: false,\r\n    focusAnimationDuration: 0.75,\r\n    focusZoom: 10,\r\n    freezeAllDragEvents: false,\r\n    height: 400,\r\n    highlightDegree: 1,\r\n    highlightOpacity: 1,\r\n    linkHighlightBehavior: false,\r\n    maxZoom: 8,\r\n    minZoom: 0.1,\r\n    nodeHighlightBehavior: false,\r\n    panAndZoom: false,\r\n    staticGraph: false,\r\n    staticGraphWithDragAndDrop: false,\r\n    width: 500,\r\n    d3: {\r\n      alphaTarget: 0.05,\r\n      gravity: -150,\r\n      linkLength: 50,\r\n      linkStrength: 1,\r\n      disableLinkForce: false\r\n    },\r\n    node: {\r\n      color: \"#d3d3d3\",\r\n      fontColor: \"black\",\r\n      fontSize: 14,\r\n      fontWeight: \"normal\",\r\n      highlightColor: \"SAME\",\r\n      highlightFontSize: 8,\r\n      highlightFontWeight: \"normal\",\r\n      highlightStrokeColor: \"SAME\",\r\n      highlightStrokeWidth: \"SAME\",\r\n      labelProperty: \"name\",\r\n      mouseCursor: \"pointer\",\r\n      opacity: 1,\r\n      renderLabel: true,\r\n      size: 200,\r\n      strokeColor: \"none\",\r\n      strokeWidth: 1.5,\r\n      svg: \"\",\r\n      symbolType: \"circle\"\r\n    },\r\n    link: {\r\n      color: \"#d3d3d3\",\r\n      fontColor: \"black\",\r\n      fontSize: 8,\r\n      fontWeight: \"normal\",\r\n      highlightColor: \"SAME\",\r\n      highlightFontSize: 8,\r\n      highlightFontWeight: \"normal\",\r\n      labelProperty: \"label\",\r\n      mouseCursor: \"pointer\",\r\n      opacity: 1,\r\n      renderLabel: false,\r\n      semanticStrokeWidth: false,\r\n      strokeWidth: 1.5,\r\n      markerHeight: 6,\r\n      markerWidth: 6,\r\n      strokeDasharray: 0,\r\n      strokeDashoffset: 0,\r\n      strokeLinecap: \"butt\"\r\n    }\r\n\r\n  };\r\n\r\n  const onClickNode = function (nodeId) {\r\n    props.nodeClick(nodeId);\r\n  };\r\n\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <Graph\r\n      id=\"graph-id\" // id is mandatory\r\n      data={data}\r\n      config={myConfig}\r\n      onClickNode={onClickNode}\r\n      //onClickLink={onClickLink}\r\n\r\n    />\r\n  )\r\n\r\n})\r\n\r\nexport default Tree;","import React, { useCallback, useEffect, useState } from 'react';\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\n\nconst Name = React.memo((props) => {\n\n\n    const NameHandler = useCallback ((event)=>{\n    props.onNameHandler(event.target.value);\n  })\n    \n \n\n\n  return (\n  <FormGroup>\n    <InputGroup size=\"sm\" className=\"mb-3\">\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"inputGroup-sizing-sm\">Course Name:</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl aria-label=\"Small\" onChange={NameHandler}  aria-describedby=\"inputGroup-sizing-sm\" />\n    </InputGroup>\n  </FormGroup>\n\n\n);\n\n})\n\nexport default Name;\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport Domains from './Domains';\nimport Areas from './Areas';\nimport Topics from './Topics';\nimport Display from './Display';\nimport Tree from './topicTree';\nimport CourseOverview from './CourseOverwiew';\nimport TreeGraph from './Tree';\nimport Name from './CourseName';\n\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction CourseBuilder() {\n\n  const color_original = '#4c72ff';\n  const color_root_node = '#ff0000';\n\n  const [selectedDomain, setSelectedDomain] = useState('');\n  const [selectedArea, setSelectedArea] = useState('');\n  const [selectedTopics, setSelectedTopics] = useState([]);\n  const [selectedTopic, setSelectedTopic] = useState([]);\n  const [topics, setTopics] = useState([]);\n  const [treeData, setTreeData] = useState([]);\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n  const [processedTopics, setProcessedTopics] = useState([]);\n  const [processedEdges, setProcessedEdges] = useState([]);\n  const [topicsForCourse, setTopicsForCourse] = useState([]);\n  const [showSearch, setShowSearch] = useState(false);\n  const [courseName, setCourseName] = useState('');\n\n  const changeDomainHandler = domainId => {\n    setSelectedDomain(domainId);\n  };\n\n  const changeAreaHandler = areaId => {\n    setSelectedArea(areaId);\n  };\n\n  const extractTopicsHandler = (selectedTopics) => {\n    axios.get('http://localhost:3000/react/get-selected-topics',\n      {\n        params: {\n          id: ((selectedTopics && selectedTopics.length > 0) ?\n            selectedTopics :\n            ['-1'])\n        }\n      })\n      .then(topics => {\n        setTopics(topics.data);\n        if (topics.data.length > 0) {\n          setButtonDisabled(false);\n        } else {\n          setButtonDisabled(true);\n        }\n\n      });\n  }\n\n  const changeTopicHandler = topics => {\n    setSelectedTopics(selectedTopics.concat(topics));\n    extractTopicsHandler(selectedTopics.concat(topics));\n  };\n\n  const selectTopicHandler = topicId => {\n    setSelectedTopic(topicId);\n  };\n\n  const buildTree = () => {\n    if (topics.length < 1) return (\n      [{ title: 'empty' }]\n    );\n    let treeData = [];\n    for (let i = 0; i < topics.length; i++) {\n      treeData.push({ title: topics[i].name, id: topics[i].id, subtitle: topics[i].teaser, url: topics[i].contentHtml });\n    }\n\n    return treeData;\n\n  }\n\n  const onNameHandler = (value) =>{\n    setCourseName(value);\n  }\n\n  const treeNodeClickHandler = (nodeId) => {\n    setSelectedTopic(nodeId);\n  }\n\n  const processTreeData = () => {\n    let nodes = [];\n    let edges = [];\n    const processChildren = (currentNode, rootPosition) => {\n      if (currentNode.children) {\n        for (let i = 0; i < currentNode.children.length; i++) {\n          const childPosition = nodes.push({ name: currentNode.children[i].title, url: \"http://localhost:3000/author/topic/\" + currentNode.children[i].id, id: currentNode.children[i].id, color: color_original });\n          edges.push({ source: currentNode.id, target: +currentNode.children[i].id });\n          if (currentNode.children[i].children) {\n            processChildren(currentNode.children[i], childPosition);\n          }\n        }\n      }\n    }\n    for (let i = 0; i < treeData.length; i++) {\n      const currentNode = treeData[i];\n      const currentPosition = nodes.push({ name: currentNode.title, url: \"http://localhost:3000/author/topic/\" + currentNode.id, id: currentNode.id, teaser: currentNode.subtitle, color: ((i === 0) ? color_root_node : color_original) });\n      processChildren(currentNode, currentPosition);\n    }\n    setProcessedTopics(nodes);\n    setProcessedEdges(edges);\n  }\n\n  const saveCourseHandler = event => {\n    setTopicsForCourse(topics);\n    processTreeData();\n  }\n\n\n  const HandleAreaSearch = () => {\n    if (!showSearch) {\n      return (\n        <Areas selectedDomain={selectedDomain} onChangeArea={changeAreaHandler} />\n      )\n    }\n    setSelectedArea('%');\n    return (\n      null\n    );\n  }\n\n\n  return (\n    <div className=\"App\" >\n      <Container fluid>\n        <Row>\n          <Col sm={2}>\n            <Form>\n              <Card>\n                <Name onNameHandler={onNameHandler}/>\n                <h4>Course content selection:</h4>\n                <Domains\n                  onChangeDomain={changeDomainHandler}\n                  showSearch={setShowSearch}\n                />\n                <HandleAreaSearch />\n                <Topics\n                  selectedArea={selectedArea}\n                  showSearch = {showSearch}\n                  onSelectedTopics={changeTopicHandler}\n                  \n                />\n                <Tree key={buildTree()}\n                  treeData={buildTree()}\n                  treeFunction={buildTree}\n                  setTreeData={setTreeData}\n                  setButtonDisabled={setButtonDisabled}\n                  selectedTopics={selectedTopics}\n                  onTopicExtracted={setTopics}\n                  onSelectedTopic={selectTopicHandler}\n                />\n                <Button\n                  variant=\"primary\"\n                  onClick={saveCourseHandler}\n                  disabled={buttonDisabled}>\n                  Apply\n                </Button>\n              </Card>\n            </Form>\n          </Col>\n          <Col sm={5}>\n            <Card>\n              <CourseOverview topics={topicsForCourse} courseName={courseName} nodeClick={treeNodeClickHandler} />\n              <TreeGraph nodes={processedTopics} edges={processedEdges} nodeClick={treeNodeClickHandler} />\n            </Card>\n          </Col>\n          <Col sm={5}>\n            <Display selectedTopic={selectedTopic} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default CourseBuilder;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Course from './components/Course/Course';\n\nconst App = props => {\n  return <Course />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'react-sortable-tree/style.css';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}